// Generated by dts-bundle v0.7.3

declare module 'richangNode' {
    import * as nodeServer from "richangNode/nodeServer/nodeServer";
    import * as nodeFile from "richangNode/nodeFile/nodeFile";
    let RichangNode: {
        nodeServer: typeof nodeServer;
        nodeFile: typeof nodeFile;
    };
    export default RichangNode;
}

declare module 'richangNode/nodeServer/nodeServer' {
    /**
        * 检查一个端口是否可用
        * @param port
        * @returns {Promise<boolean>}
        */
    export function checkPortFree(port: number): Promise<boolean>;
    /**
        * 注册一个端口占用的启动错误的捕捉器
        * 当 node 应用因为端口占用而启动失败时，给出提示并且找到是那个进程占用了端口
        */
    export function signPortUsedErrorCatch(): void;
}

declare module 'richangNode/nodeFile/nodeFile' {
    import { TempDirManager as _TempDirManager } from "richangNode/nodeFile/lib/TempDirManager";
    export const TempDirManager: typeof _TempDirManager;
    interface INodeDirent {
            isFile(): boolean;
            isDirectory(): boolean;
            isBlockDevice(): boolean;
            isCharacterDevice(): boolean;
            isSymbolicLink(): boolean;
            isFIFO(): boolean;
            isSocket(): boolean;
            name: string;
    }
    interface INodeStats {
            isFile(): boolean;
            isDirectory(): boolean;
            isBlockDevice(): boolean;
            isCharacterDevice(): boolean;
            isSymbolicLink(): boolean;
            isFIFO(): boolean;
            isSocket(): boolean;
            dev: number;
            ino: number;
            mode: number;
            nlink: number;
            uid: number;
            gid: number;
            rdev: number;
            size: number;
            blksize: number;
            blocks: number;
            atimeMs: number;
            mtimeMs: number;
            ctimeMs: number;
            birthtimeMs: number;
            atime: Date;
            mtime: Date;
            ctime: Date;
            birthtime: Date;
    }
    type WriteFileOptions = {
            encoding?: string | null;
            mode?: number | string;
            flag?: string;
    } | string | null;
    /**
        * 读取目录
        *
        * @example
        * // 读取目录下文件文件名
        * await readdir("./") => ["file1","file2"]
        *
        * @param path
        * @return {Promise<any>}
        */
    export function readdir(path: any): Promise<string>;
    /**
        * 读取目录和类型
        * // 读取目录下文件，返回 INodeDirent
        * let list =await readdir("./", {withFileTypes:true}) => [Dirent,Dirent]
        * list[0].isFile()
        * list[0].isDirectory()
        * list[0].isSymbolicLink()
        *
        * @param path
        * @return {Promise<INodeDirent[]>}
        */
    export function readdirWithType(path: any): Promise<INodeDirent[]>;
    /**
        * 写一个文件
        * @param path
        * @param data
        * @param [option] { encoding?: string | null; mode?: number | string; flag?: string }
        */
    export function writeFile(path: any, data: any, option: WriteFileOptions): Promise<any>;
    /**
        * 读一个文件
        * @param path
        * @param data
        * @param [option] { encoding?: string | null; mode?: number | string; flag?: string }
        */
    export function readFile(path: any, data: any, option?: {
            encoding?: null;
            flag?: string;
    }): Promise<{
            encoding?: null;
            flag?: string;
    }>;
    /**
        * 读一个文件的属性
        * @param path
        * @return {Promise<INodeStats>}
        */
    export function stat(path: string): Promise<INodeStats>;
    /**
        * 目标文件是否存在
        * @param path
        */
    export function isExists(path: string): Promise<{}>;
    export {};
}

declare module 'richangNode/nodeFile/lib/TempDirManager' {
    export class TempDirManager {
            sysTempDir: string;
            mianTempDir: string;
            tempDir: string;
            timestamp: string;
            constructor(name: string);
            /**
                * 销毁临时目录
                */
            destroy(): void;
            /**
                * 申请一个临时文件路径
                *@example
                * newTempFilePath() // => "c:/temp/xd123fs43aew"
                * // 可用提供一个子文件夹名
                * genTempFilePath("static") // => "c:/temp/static/xd123fs43aew"
                * @param subDir
                * @return {any}
                */
            newTempFilePath(subDir: string): any;
            /**
                * 清除过时的临时实例文件夹
                * @param day 清除这个天数（包括）之前的文件夹
                */
            clear(day?: number): void;
    }
}

